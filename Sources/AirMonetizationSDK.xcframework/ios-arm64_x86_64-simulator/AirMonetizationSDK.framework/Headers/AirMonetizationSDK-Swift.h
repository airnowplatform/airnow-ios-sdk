#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
#ifndef AIRMONETIZATIONSDK_SWIFT_H
#define AIRMONETIZATIONSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AirMonetizationSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;
@class NSNumber;

/// AirMonetization is a class for AirMotetization SDK usage start.
/// Before any calls to some king of Ads you have to
/// set APIKey and AppId first.
/// APIKey and AppId you can take from your Developer’s dashboard.
/// After setting key and id you can use In-App and Inline banners, Interstitial Ads, VAST Ads.
/// Example of basic Interstitial usage:
/// AirMotetizationSDK.shared.setAPIKey(key: “1536670236318760666”, appID: “398406”)
/// let intestitial: AirMotetizationAd = AirMonetizationInterstitial.interstitial()
/// intestitial.delegate = self // implement delegate if neccessary
/// intestitial.load()
/// For test purposes there is a test mode. In test mode ads will be shown
/// but ad events aren’t tracked.
SWIFT_CLASS("_TtC18AirMonetizationSDK15AirMonetization")
@interface AirMonetization : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AirMonetization * _Nonnull shared;)
+ (AirMonetization * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@property (nonatomic, readonly, copy) NSString * _Nonnull sdkVersion;
/// Sets the APIKey and APPId which are assosiated
/// with your app in Developer’s Dashboard.
/// @param key    String with you APIKey in Dashboard
/// @param appID  String with you AppID in Dashboard
- (void)setAPIKeyWithKey:(NSString * _Nonnull)key appID:(NSString * _Nonnull)appID;
/// Returns current status for SDK(initialized or not)
/// @return BOOL true if test mode is enabled.
- (BOOL)isSdkInitialized SWIFT_WARN_UNUSED_RESULT;
/// Sets test mode for the SDK. In test mode Ads are working as
/// usual but aren’t tracked and monetised.
/// @param testMode Bool value true/false
- (void)setTestModeWithTestMode:(BOOL)testMode;
/// Returns current test mode state
/// @return BOOL true if test mode is enabled.
@property (nonatomic, readonly) BOOL isTestMode;
@end

@class AirMotetizationAd;

/// Implement AirMotetizationAdDelegate protocol to receive events
/// for ads states, show, handle errors, manage your app’s
/// state like playing/stopping video.
SWIFT_PROTOCOL("_TtP18AirMonetizationSDK25AirMonetizationAdDelegate_")
@protocol AirMonetizationAdDelegate
/// Invoked just after starting ad loading request to server.
/// @param ad Corresponding AirMotetizationAd object.
- (void)adDidStartLoadWithAd:(AirMotetizationAd * _Nonnull)ad;
/// Invoked once ad is loaded and ready to show.
/// You have to call ‘show’ method on AirMotetizationAd by yourself.
/// Otherwise it won’t be displayed.
/// Use this method to pause any activity
/// like game/video/music etc. and then
/// show the ad.
/// @param ad Corresponding AirMotetizationAd object.
- (void)adDidFinishLoadWithAd:(AirMotetizationAd * _Nonnull)ad;
/// Invoked after ad is displayed on screen.
/// @param ad Corresponding AirMotetizationAd object.
- (void)adDidShowWithAd:(AirMotetizationAd * _Nonnull)ad;
/// Invoked just after user’s click on ad
/// but before its processing.
/// @param ad Corresponding AirMotetizationAd object.
- (void)adDidClickWithAd:(AirMotetizationAd * _Nonnull)ad;
/// Invoked after user closed an ad with a close button.
/// @param ad Corresponding AirMotetizationAd object.
- (void)adDidCloseWithAd:(AirMotetizationAd * _Nonnull)ad;
/// Invoked after a user’s click on ad is processed and user is redirected to advertiser’s URL.
/// Also invoked after user finishes ad action.
/// Getting this delegate’s event while redirection usually means that application is left and likely is going to background.
/// Process it appropriately.
/// @param ad Corresponding AirMotetizationAd object.
- (void)adDidCompleteWithAd:(AirMotetizationAd * _Nonnull)ad;
/// Invoked when all ad actions are finished and ad deallocated its resources.
/// After this method you can deallocate ‘AirMotetizationAd’ object itself.
/// Use this method to continue playing of your game/video/audio.
/// @param ad Corresponding AirMotetizationAd object.
- (void)adDidDismissWithAd:(AirMotetizationAd * _Nonnull)ad;
/// Invoked in case of any error occured on ad loading, displaying etc.
/// @param ad Corresponding AirMotetizationAd object.
/// @param error String with error description.
- (void)adDidFailWithErrorWithAd:(AirMotetizationAd * _Nonnull)ad error:(NSString * _Nonnull)error;
/// Invoked in case of any error occured on ad loading, displaying etc.
/// @param ad Corresponding AirMotetizationAd object.
/// @param error String with error description.
- (void)adDidShowFailWithErrorWithAd:(AirMotetizationAd * _Nonnull)ad error:(NSString * _Nonnull)error;
@end

typedef SWIFT_ENUM(NSInteger, AirMonetizationAdType, open) {
  AirMonetizationAdTypeInappBanner = 0,
  AirMonetizationAdTypeInlineBanner = 1,
  AirMonetizationAdTypeInterstitial = 2,
  AirMonetizationAdTypeVAST = 3,
  AirMonetizationAdTypeRewarded = 4,
};


SWIFT_CLASS("_TtC18AirMonetizationSDK30AirMonetizationAdapterSettings")
@interface AirMonetizationAdapterSettings : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkVersion;)
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSString * _Nonnull APIKey;
@property (nonatomic, copy) NSString * _Nonnull appID;
@property (nonatomic) BOOL testMode;
@property (nonatomic, copy) NSString * _Nullable placementName;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (BOOL)setupSDK SWIFT_WARN_UNUSED_RESULT;
@end


@interface AirMonetizationAdapterSettings (SWIFT_EXTENSION(AirMonetizationSDK))
/// Create an instance from <code>[AnyHashable: Any]</code>
/// \param dictionary representation of AirMonetizationAdapterSettings instance
///
/// \param isTesting representation of AirMonetizationAdapterSettings instance test mode
///
///
/// returns:
/// A <code>AirMonetizationAdapterSettings</code> object instance.
+ (AirMonetizationAdapterSettings * _Nullable)instanceFrom:(NSDictionary * _Nonnull)dictionary error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Return a dictionary representation of the current AirMonetizationAdapterSettings object.
///
/// returns:
/// A <code>[AnyHashable: Any]</code> representing the object.
- (NSDictionary * _Nullable)toDictionaryAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC18AirMonetizationSDK25AirMonetizationBannerSize")
@interface AirMonetizationBannerSize : NSObject
@property (nonatomic) NSInteger width;
@property (nonatomic) NSInteger height;
- (nonnull instancetype)initWithWidth:(NSInteger)width height:(NSInteger)height OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol AirMonetizationRewardedAdDelegate;
@class NSBundle;
@class NSCoder;

/// Base class for Interstitial Ads, In-App Banners, Inline banners, VAST video Ads.
/// This class does nothing.
/// Its logic is implemented in subclasses.
SWIFT_CLASS("_TtC18AirMonetizationSDK17AirMotetizationAd")
@interface AirMotetizationAd : UIViewController
/// Delegate that implements AirMonetizationAdDelegate protocol.
@property (nonatomic, weak) id <AirMonetizationAdDelegate> _Nullable delegate;
/// Delegate that implements AirMonetizationAdDelegate protocol.
@property (nonatomic, weak) id <AirMonetizationRewardedAdDelegate> _Nullable rewardDelegate;
/// Indicates whether the ad can be displayed.
/// Use this field for Interstitial, VAST, Rewarded Ads.
@property (nonatomic, readonly) BOOL isCanOpen;
/// Indicates type of ad.
/// Use this field for Banners, Interstitial, VAST, Rewarded Ads.
@property (nonatomic, readonly) enum AirMonetizationAdType requestAdType;
/// Sets placement Name.
/// Placement Name corresponds to one set in your Developers Dashboard.
/// @param placementName String with placement number from Dashboard.
- (void)setPlacementNameWithPlacementName:(NSString * _Nonnull)placementName;
/// Sets user id.
/// User ID corresponds to the unique user ID from the application.
/// This field is necessary for the user to receive a reward.
/// This field is required for Rewarded Ads.
/// @param userId String with user identifier from the app.
- (void)setUserIdWithUserId:(NSString * _Nonnull)userId;
- (void)setSourceWithSource:(NSString * _Nonnull)source;
/// Starts loading an Ad.
/// If ad is already loaded calling this method
/// will dismiss it a new ad will start load.
- (void)load;
/// Shows the loaded ad on screen.
/// If called before ad is loaded
/// it will return an error on its delegate.
/// You have to call this method by yourself in ‘adDidFinishLoad’ (AirMonetizationAdDelegate) method.
- (void)show;
/// Hides, dissmisses the ad, deallocates resources.
/// If ad is currenlty loading - it will be stoped
/// and dismissed.
- (void)dismiss;
/// Stops the ad’s loading.
/// For In-App and Inline Banner also stops the refreshing.
- (void)stop;
/// Removes the ad’ss from parent view controller.
/// Required to remove Inline banner from the parent view controller.
- (void)removeFromViewController;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// AirMonetizationInappBanner is a base class to use inapp banners in your app.
/// <ol>
///   <li>
///     To start its using set your APIKey and AppId first for AirMonetization SDK.
///   </li>
///   <li>
///     Instantiate banner object by calling ‘inappBanner’ class method.
///   </li>
///   <li>
///     You have to own returned object (it’s not a singleton).
///   </li>
///   <li>
///     Set chosen placementID (take from your Dashboard).
///   </li>
///   <li>
///     Set your ‘AirMonetizationAdDelegate’ if you need to handle ad events.
///   </li>
///   <li>
///     Call ‘load’
///   </li>
/// </ol>
SWIFT_CLASS("_TtC18AirMonetizationSDK26AirMonetizationInappBanner")
@interface AirMonetizationInappBanner : AirMotetizationAd
/// Start working with inappBanner by creating it
/// with this class method.
/// @return Instantiated AirMonetizationInappBanner object ready to load.
+ (AirMotetizationAd * _Nullable)inappBannerWithBannerSize:(AirMonetizationBannerSize * _Nonnull)bannerSize SWIFT_WARN_UNUSED_RESULT;
/// Start working with inappBanner by creating it
/// with this class method.
/// @return Instantiated AirMonetizationInappBanner object ready to load.
+ (AirMotetizationAd * _Nullable)inappBannerWithBannerSize:(AirMonetizationBannerSize * _Nonnull)bannerSize placementName:(NSString * _Nonnull)placementName SWIFT_WARN_UNUSED_RESULT;
/// Sets placement Name for inapp banners.
/// For placement Name see your Dashboard.
/// @param placementName String with chosen placement.
- (void)setPlacementNameWithPlacementName:(NSString * _Nonnull)placementName;
- (void)setSourceWithSource:(NSString * _Nonnull)source;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIView;

/// AirMonetizationInlileBanner is a base class to use inline banners in your app.
/// <ol>
///   <li>
///     To start its using set your APIKey and AppId first for AirMonetization SDK.
///   </li>
///   <li>
///     Instantiate banner object by calling ‘inlineBanner’ class method.
///   </li>
///   <li>
///     You have to own returned object (it’s not a singleton).
///   </li>
///   <li>
///     Set your ‘AirMonetizationAdDelegate’ if you need to handle ad events.
///   </li>
///   <li>
///     Call ‘load’
///   </li>
/// </ol>
SWIFT_CLASS("_TtC18AirMonetizationSDK27AirMonetizationInlileBanner")
@interface AirMonetizationInlileBanner : AirMotetizationAd
/// Start working with Inline banner by creating it
/// with this class method.
/// Put your UIView and your UIViewController in ‘inlineBanner’ method.
/// For example: AirMonetizationInlileBanner.inlineBanner(bannerView: self.inAppBannerView, parentController: self)
/// @return Instantiated AirMonetizationInlileBanner object ready to load.
+ (AirMotetizationAd * _Nullable)inlineBannerWithBannerView:(UIView * _Nonnull)bannerView withBannerSize:(AirMonetizationBannerSize * _Nonnull)bannerSize SWIFT_WARN_UNUSED_RESULT;
/// Start working with Inline banner by creating it
/// with this class method.
/// Put your UIView and your UIViewController in ‘inlineBanner’ method.
/// For example: AirMonetizationInlileBanner.inlineBanner(bannerView: self.inAppBannerView, parentController: self)
/// @return Instantiated AirMonetizationInlileBanner object ready to load.
+ (AirMotetizationAd * _Nullable)inlineBannerWithBannerView:(UIView * _Nonnull)bannerView withBannerSize:(AirMonetizationBannerSize * _Nonnull)bannerSize placementName:(NSString * _Nonnull)placementName SWIFT_WARN_UNUSED_RESULT;
/// Sets placement Name for inline banners.
/// For placement Name see your Dashboard.
/// @param placementName String with chosen placement.
- (void)setPlacementNameWithPlacementName:(NSString * _Nonnull)placementName;
- (void)setSourceWithSource:(NSString * _Nonnull)source;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// AirMonetizationInterstitial is a base class to use Interstitial Ads in your app.
/// <ol>
///   <li>
///     To start its using set your APIKey and AppId first for AirMonetization SDK.
///   </li>
///   <li>
///     Instantiate Intestitial Ad object by calling ‘interstitial’ class method.
///   </li>
///   <li>
///     You have to own returned object (it’s not a singleton).
///   </li>
///   <li>
///     Set your ‘AirMonetizationAdDelegate’ if you need to handle ad events.
///   </li>
///   <li>
///     Call ‘load’
///   </li>
/// </ol>
SWIFT_CLASS("_TtC18AirMonetizationSDK27AirMonetizationInterstitial")
@interface AirMonetizationInterstitial : AirMotetizationAd
/// Start working with Intestitial by creating it
/// with this class method.
/// @return Instantiated AirMonetizationInterstitial object ready to load.
+ (AirMotetizationAd * _Nullable)interstitial SWIFT_WARN_UNUSED_RESULT;
/// Start working with Intestitial by creating it
/// with this class method.
/// @return Instantiated AirMonetizationInterstitial object ready to load.
+ (AirMotetizationAd * _Nullable)interstitialWithPlacementName:(NSString * _Nonnull)placementName SWIFT_WARN_UNUSED_RESULT;
/// Sets placement Name for interstitial.
/// For placement Name see your Dashboard.
/// @param placementName String with chosen placement.
- (void)setPlacementNameWithPlacementName:(NSString * _Nonnull)placementName;
- (void)setSourceWithSource:(NSString * _Nonnull)source;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// AirMonetizationRewarded is a base class to use Rewarded VAST video Ads in your app.
/// <ol>
///   <li>
///     To start its using set your APIKey and AppId first for AirMonetization SDK.
///   </li>
///   <li>
///     Instantiate Rewarded Ad object by calling ‘rewarded’ class method.
///   </li>
///   <li>
///     You have to own returned object (it’s not a singleton).
///   </li>
///   <li>
///     Set your ‘AirMonetizationRewardedAdDelegate’ if you need to handle ad events.
///   </li>
///   <li>
///     Call ‘load’
///   </li>
/// </ol>
SWIFT_CLASS("_TtC18AirMonetizationSDK23AirMonetizationRewarded")
@interface AirMonetizationRewarded : AirMotetizationAd
/// Start working with Rewarded VAST Video Ad by creating it
/// with this class method.
/// @return Instantiated AirMonetizationRewarded object ready to load.
+ (AirMotetizationAd * _Nullable)rewardedWithPlacementName:(NSString * _Nonnull)placementName SWIFT_WARN_UNUSED_RESULT;
/// Sets placement Name for rewarded ad.
/// For placement Name see your Dashboard.
/// @param placementName String with chosen placement.
- (void)setPlacementNameWithPlacementName:(NSString * _Nonnull)placementName;
/// Sets user id for rewarded ad.
/// User ID corresponds to the unique user ID from the application.
/// This field is necessary for the user to receive a reward.
/// This field is required for Rewarded Ads.
/// @param userId String with user identifier from the app.
- (void)setUserIdWithUserId:(NSString * _Nonnull)userId;
- (void)setSourceWithSource:(NSString * _Nonnull)source;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// Implement AirMonetizationRewardedAdDelegate protocol to receive events
/// for rewarded ads states, show, handle errors, manage your app’s
/// state like playing/stopping video.
SWIFT_PROTOCOL("_TtP18AirMonetizationSDK33AirMonetizationRewardedAdDelegate_")
@protocol AirMonetizationRewardedAdDelegate
/// Invoked just after starting rewarded ad loading request to server.
/// @param ad Corresponding AirMotetizationAd object.
- (void)rewardedAdDidStartLoadWithAd:(AirMotetizationAd * _Nonnull)ad;
/// Invoked once rewarded ad is loaded and ready to show.
/// You have to call ‘show’ method on AirMotetizationAd by yourself.
/// Otherwise it won’t be displayed.
/// Use this method to pause any activity
/// like game/video/music etc. and then
/// show the rewarded ad.
/// @param ad Corresponding AirMotetizationAd object.
- (void)rewardedAdDidFinishLoadWithAd:(AirMotetizationAd * _Nonnull)ad rewardName:(NSString * _Nonnull)rewardName rewardValue:(NSInteger)rewardValue;
/// Invoked after reward was receivev for user.
/// @param ad Corresponding AirMotetizationAd object.
- (void)rewardedAdDidReceiveRewardWithAd:(AirMotetizationAd * _Nonnull)ad rewardName:(NSString * _Nonnull)rewardName rewardValue:(NSInteger)rewardValue;
/// Invoked after rewarded ad is displayed on screen.
/// @param ad Corresponding AirMotetizationAd object.
- (void)rewardedAdDidShowWithAd:(AirMotetizationAd * _Nonnull)ad;
/// Invoked just after user’s click on rewarded ad
/// but before its processing.
/// @param ad Corresponding AirMotetizationAd object.
- (void)rewardedAdDidClickWithAd:(AirMotetizationAd * _Nonnull)ad;
/// Invoked after user closed rewarded an ad with a close button.
/// @param ad Corresponding AirMotetizationAd object.
- (void)rewardedAdDidCloseWithAd:(AirMotetizationAd * _Nonnull)ad;
/// Invoked after a user’s click on rewarded ad is processed and user is redirected to advertiser’s URL.
/// Also invoked after user finishes ad action.
/// Getting this delegate’s event while redirection usually means that application is left and likely is going to background.
/// Process it appropriately.
/// @param ad Corresponding AirMotetizationAd object.
- (void)rewardedAdDidCompleteWithAd:(AirMotetizationAd * _Nonnull)ad;
/// Invoked when all rewarded ad actions are finished and rewarded ad deallocated its resources.
/// After this method you can deallocate ‘AirMotetizationAd’ object itself.
/// Use this method to continue playing of your game/video/audio.
/// @param ad Corresponding AirMotetizationAd object.
- (void)rewardedAdDidDismissWithAd:(AirMotetizationAd * _Nonnull)ad;
/// Invoked in case of any error occured on rewarded ad loading.
/// @param ad Corresponding AirMotetizationAd object.
/// @param error String with error description.
- (void)rewardedAdDidFailWithErrorWithAd:(AirMotetizationAd * _Nonnull)ad error:(NSString * _Nonnull)error;
/// Invoked in case of any error occured on rewarded ad displaying.
/// @param ad Corresponding AirMotetizationAd object.
/// @param error String with error description.
- (void)rewardedAdDidShowFailWithErrorWithAd:(AirMotetizationAd * _Nonnull)ad error:(NSString * _Nonnull)error;
@end


/// AirMonetizationVAST is a base class to use VAST video Ads in your app.
/// <ol>
///   <li>
///     To start its using set your APIKey and AppId first for AirMonetization SDK.
///   </li>
///   <li>
///     Instantiate VAST Ad object by calling ‘vastVideo’ class method.
///   </li>
///   <li>
///     You have to own returned object (it’s not a singleton).
///   </li>
///   <li>
///     Set your ‘AirMonetizationAdDelegate’ if you need to handle ad events.
///   </li>
///   <li>
///     Call ‘load’
///   </li>
/// </ol>
SWIFT_CLASS("_TtC18AirMonetizationSDK19AirMonetizationVAST")
@interface AirMonetizationVAST : AirMotetizationAd
/// Start working with VAST Video Ad by creating it
/// with this class method.
/// @return Instantiated AirMonetizationVAST object ready to load.
+ (AirMotetizationAd * _Nullable)vastVideo SWIFT_WARN_UNUSED_RESULT;
/// Start working with VAST Video Ad by creating it
/// with this class method.
/// @return Instantiated AirMonetizationVAST object ready to load.
+ (AirMotetizationAd * _Nullable)vastVideoWithPlacementName:(NSString * _Nonnull)placementName SWIFT_WARN_UNUSED_RESULT;
/// Sets placement Name for VAST Video.
/// For placement Name see your Dashboard.
/// @param placementName String with chosen placement.
- (void)setPlacementNameWithPlacementName:(NSString * _Nonnull)placementName;
- (void)setSourceWithSource:(NSString * _Nonnull)source;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end














#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
#ifndef AIRMONETIZATIONSDK_SWIFT_H
#define AIRMONETIZATIONSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AirMonetizationSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;
@class NSNumber;

/// AirMonetization is a class for AirMotetization SDK usage start.
/// Before any calls to some king of Ads you have to
/// set APIKey and AppId first.
/// APIKey and AppId you can take from your Developer’s dashboard.
/// After setting key and id you can use In-App and Inline banners, Interstitial Ads, VAST Ads.
/// Example of basic Interstitial usage:
/// AirMotetizationSDK.shared.setAPIKey(key: “1536670236318760666”, appID: “398406”)
/// let intestitial: AirMotetizationAd = AirMonetizationInterstitial.interstitial()
/// intestitial.delegate = self // implement delegate if neccessary
/// intestitial.load()
/// For test purposes there is a test mode. In test mode ads will be shown
/// but ad events aren’t tracked.
SWIFT_CLASS("_TtC18AirMonetizationSDK15AirMonetization")
@interface AirMonetization : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AirMonetization * _Nonnull shared;)
+ (AirMonetization * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@property (nonatomic, readonly, copy) NSString * _Nonnull sdkVersion;
/// Sets the APIKey and APPId which are assosiated
/// with your app in Developer’s Dashboard.
/// @param key    String with you APIKey in Dashboard
/// @param appID  String with you AppID in Dashboard
- (void)setAPIKeyWithKey:(NSString * _Nonnull)key appID:(NSString * _Nonnull)appID;
/// Returns current status for SDK(initialized or not)
/// @return BOOL true if test mode is enabled.
- (BOOL)isSdkInitialized SWIFT_WARN_UNUSED_RESULT;
/// Sets test mode for the SDK. In test mode Ads are working as
/// usual but aren’t tracked and monetised.
/// @param testMode Bool value true/false
- (void)setTestModeWithTestMode:(BOOL)testMode;
/// Returns current test mode state
/// @return BOOL true if test mode is enabled.
@property (nonatomic, readonly) BOOL isTestMode;
@end

@class AirMotetizationAd;

/// Implement AirMotetizationAdDelegate protocol to receive events
/// for ads states, show, handle errors, manage your app’s
/// state like playing/stopping video.
SWIFT_PROTOCOL("_TtP18AirMonetizationSDK25AirMonetizationAdDelegate_")
@protocol AirMonetizationAdDelegate
/// Invoked just after starting ad loading request to server.
/// @param ad Corresponding AirMotetizationAd object.
- (void)adDidStartLoadWithAd:(AirMotetizationAd * _Nonnull)ad;
/// Invoked once ad is loaded and ready to show.
/// You have to call ‘show’ method on AirMotetizationAd by yourself.
/// Otherwise it won’t be displayed.
/// Use this method to pause any activity
/// like game/video/music etc. and then
/// show the ad.
/// @param ad Corresponding AirMotetizationAd object.
- (void)adDidFinishLoadWithAd:(AirMotetizationAd * _Nonnull)ad;
/// Invoked after ad is displayed on screen.
/// @param ad Corresponding AirMotetizationAd object.
- (void)adDidShowWithAd:(AirMotetizationAd * _Nonnull)ad;
/// Invoked just after user’s click on ad
/// but before its processing.
/// @param ad Corresponding AirMotetizationAd object.
- (void)adDidClickWithAd:(AirMotetizationAd * _Nonnull)ad;
/// Invoked after user closed an ad with a close button.
/// @param ad Corresponding AirMotetizationAd object.
- (void)adDidCloseWithAd:(AirMotetizationAd * _Nonnull)ad;
/// Invoked after a user’s click on ad is processed and user is redirected to advertiser’s URL.
/// Also invoked after user finishes ad action.
/// Getting this delegate’s event while redirection usually means that application is left and likely is going to background.
/// Process it appropriately.
/// @param ad Corresponding AirMotetizationAd object.
- (void)adDidCompleteWithAd:(AirMotetizationAd * _Nonnull)ad;
/// Invoked when all ad actions are finished and ad deallocated its resources.
/// After this method you can deallocate ‘AirMotetizationAd’ object itself.
/// Use this method to continue playing of your game/video/audio.
/// @param ad Corresponding AirMotetizationAd object.
- (void)adDidDismissWithAd:(AirMotetizationAd * _Nonnull)ad;
/// Invoked in case of any error occured on ad loading, displaying etc.
/// @param ad Corresponding AirMotetizationAd object.
/// @param error String with error description.
- (void)adDidFailWithErrorWithAd:(AirMotetizationAd * _Nonnull)ad error:(NSString * _Nonnull)error;
/// Invoked in case of any error occured on ad loading, displaying etc.
/// @param ad Corresponding AirMotetizationAd object.
/// @param error String with error description.
- (void)adDidShowFailWithErrorWithAd:(AirMotetizationAd * _Nonnull)ad error:(NSString * _Nonnull)error;
@end

typedef SWIFT_ENUM(NSInteger, AirMonetizationAdType, open) {
  AirMonetizationAdTypeInappBanner = 0,
  AirMonetizationAdTypeInlineBanner = 1,
  AirMonetizationAdTypeInterstitial = 2,
  AirMonetizationAdTypeVAST = 3,
  AirMonetizationAdTypeRewarded = 4,
};


SWIFT_CLASS("_TtC18AirMonetizationSDK30AirMonetizationAdapterSettings")
@interface AirMonetizationAdapterSettings : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkVersion;)
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSString * _Nonnull APIKey;
@property (nonatomic, copy) NSString * _Nonnull appID;
@property (nonatomic) BOOL testMode;
@property (nonatomic, copy) NSString * _Nullable placementName;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (BOOL)setupSDK SWIFT_WARN_UNUSED_RESULT;
@end


@interface AirMonetizationAdapterSettings (SWIFT_EXTENSION(AirMonetizationSDK))
/// Create an instance from <code>[AnyHashable: Any]</code>
/// \param dictionary representation of AirMonetizationAdapterSettings instance
///
/// \param isTesting representation of AirMonetizationAdapterSettings instance test mode
///
///
/// returns:
/// A <code>AirMonetizationAdapterSettings</code> object instance.
+ (AirMonetizationAdapterSettings * _Nullable)instanceFrom:(NSDictionary * _Nonnull)dictionary error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Return a dictionary representation of the current AirMonetizationAdapterSettings object.
///
/// returns:
/// A <code>[AnyHashable: Any]</code> representing the object.
- (NSDictionary * _Nullable)toDictionaryAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC18AirMonetizationSDK25AirMonetizationBannerSize")
@interface AirMonetizationBannerSize : NSObject
@property (nonatomic) NSInteger width;
@property (nonatomic) NSInteger height;
- (nonnull instancetype)initWithWidth:(NSInteger)width height:(NSInteger)height OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol AirMonetizationRewardedAdDelegate;
@class NSBundle;
@class NSCoder;

/// Base class for Interstitial Ads, In-App Banners, Inline banners, VAST video Ads.
/// This class does nothing.
/// Its logic is implemented in subclasses.
SWIFT_CLASS("_TtC18AirMonetizationSDK17AirMotetizationAd")
@interface AirMotetizationAd : UIViewController
/// Delegate that implements AirMonetizationAdDelegate protocol.
@property (nonatomic, weak) id <AirMonetizationAdDelegate> _Nullable delegate;
/// Delegate that implements AirMonetizationAdDelegate protocol.
@property (nonatomic, weak) id <AirMonetizationRewardedAdDelegate> _Nullable rewardDelegate;
/// Indicates whether the ad can be displayed.
/// Use this field for Interstitial, VAST, Rewarded Ads.
@property (nonatomic, readonly) BOOL isCanOpen;
/// Indicates type of ad.
/// Use this field for Banners, Interstitial, VAST, Rewarded Ads.
@property (nonatomic, readonly) enum AirMonetizationAdType requestAdType;
/// Sets placement Name.
/// Placement Name corresponds to one set in your Developers Dashboard.
/// @param placementName String with placement number from Dashboard.
- (void)setPlacementNameWithPlacementName:(NSString * _Nonnull)placementName;
/// Sets user id.
/// User ID corresponds to the unique user ID from the application.
/// This field is necessary for the user to receive a reward.
/// This field is required for Rewarded Ads.
/// @param userId String with user identifier from the app.
- (void)setUserIdWithUserId:(NSString * _Nonnull)userId;
- (void)setSourceWithSource:(NSString * _Nonnull)source;
/// Starts loading an Ad.
/// If ad is already loaded calling this method
/// will dismiss it a new ad will start load.
- (void)load;
/// Shows the loaded ad on screen.
/// If called before ad is loaded
/// it will return an error on its delegate.
/// You have to call this method by yourself in ‘adDidFinishLoad’ (AirMonetizationAdDelegate) method.
- (void)show;
/// Hides, dissmisses the ad, deallocates resources.
/// If ad is currenlty loading - it will be stoped
/// and dismissed.
- (void)dismiss;
/// Stops the ad’s loading.
/// For In-App and Inline Banner also stops the refreshing.
- (void)stop;
/// Removes the ad’ss from parent view controller.
/// Required to remove Inline banner from the parent view controller.
- (void)removeFromViewController;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// AirMonetizationInappBanner is a base class to use inapp banners in your app.
/// <ol>
///   <li>
///     To start its using set your APIKey and AppId first for AirMonetization SDK.
///   </li>
///   <li>
///     Instantiate banner object by calling ‘inappBanner’ class method.
///   </li>
///   <li>
///     You have to own returned object (it’s not a singleton).
///   </li>
///   <li>
///     Set chosen placementID (take from your Dashboard).
///   </li>
///   <li>
///     Set your ‘AirMonetizationAdDelegate’ if you need to handle ad events.
///   </li>
///   <li>
///     Call ‘load’
///   </li>
/// </ol>
SWIFT_CLASS("_TtC18AirMonetizationSDK26AirMonetizationInappBanner")
@interface AirMonetizationInappBanner : AirMotetizationAd
/// Start working with inappBanner by creating it
/// with this class method.
/// @return Instantiated AirMonetizationInappBanner object ready to load.
+ (AirMotetizationAd * _Nullable)inappBannerWithBannerSize:(AirMonetizationBannerSize * _Nonnull)bannerSize SWIFT_WARN_UNUSED_RESULT;
/// Start working with inappBanner by creating it
/// with this class method.
/// @return Instantiated AirMonetizationInappBanner object ready to load.
+ (AirMotetizationAd * _Nullable)inappBannerWithBannerSize:(AirMonetizationBannerSize * _Nonnull)bannerSize placementName:(NSString * _Nonnull)placementName SWIFT_WARN_UNUSED_RESULT;
/// Sets placement Name for inapp banners.
/// For placement Name see your Dashboard.
/// @param placementName String with chosen placement.
- (void)setPlacementNameWithPlacementName:(NSString * _Nonnull)placementName;
- (void)setSourceWithSource:(NSString * _Nonnull)source;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIView;

/// AirMonetizationInlileBanner is a base class to use inline banners in your app.
/// <ol>
///   <li>
///     To start its using set your APIKey and AppId first for AirMonetization SDK.
///   </li>
///   <li>
///     Instantiate banner object by calling ‘inlineBanner’ class method.
///   </li>
///   <li>
///     You have to own returned object (it’s not a singleton).
///   </li>
///   <li>
///     Set your ‘AirMonetizationAdDelegate’ if you need to handle ad events.
///   </li>
///   <li>
///     Call ‘load’
///   </li>
/// </ol>
SWIFT_CLASS("_TtC18AirMonetizationSDK27AirMonetizationInlileBanner")
@interface AirMonetizationInlileBanner : AirMotetizationAd
/// Start working with Inline banner by creating it
/// with this class method.
/// Put your UIView and your UIViewController in ‘inlineBanner’ method.
/// For example: AirMonetizationInlileBanner.inlineBanner(bannerView: self.inAppBannerView, parentController: self)
/// @return Instantiated AirMonetizationInlileBanner object ready to load.
+ (AirMotetizationAd * _Nullable)inlineBannerWithBannerView:(UIView * _Nonnull)bannerView withBannerSize:(AirMonetizationBannerSize * _Nonnull)bannerSize SWIFT_WARN_UNUSED_RESULT;
/// Start working with Inline banner by creating it
/// with this class method.
/// Put your UIView and your UIViewController in ‘inlineBanner’ method.
/// For example: AirMonetizationInlileBanner.inlineBanner(bannerView: self.inAppBannerView, parentController: self)
/// @return Instantiated AirMonetizationInlileBanner object ready to load.
+ (AirMotetizationAd * _Nullable)inlineBannerWithBannerView:(UIView * _Nonnull)bannerView withBannerSize:(AirMonetizationBannerSize * _Nonnull)bannerSize placementName:(NSString * _Nonnull)placementName SWIFT_WARN_UNUSED_RESULT;
/// Sets placement Name for inline banners.
/// For placement Name see your Dashboard.
/// @param placementName String with chosen placement.
- (void)setPlacementNameWithPlacementName:(NSString * _Nonnull)placementName;
- (void)setSourceWithSource:(NSString * _Nonnull)source;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// AirMonetizationInterstitial is a base class to use Interstitial Ads in your app.
/// <ol>
///   <li>
///     To start its using set your APIKey and AppId first for AirMonetization SDK.
///   </li>
///   <li>
///     Instantiate Intestitial Ad object by calling ‘interstitial’ class method.
///   </li>
///   <li>
///     You have to own returned object (it’s not a singleton).
///   </li>
///   <li>
///     Set your ‘AirMonetizationAdDelegate’ if you need to handle ad events.
///   </li>
///   <li>
///     Call ‘load’
///   </li>
/// </ol>
SWIFT_CLASS("_TtC18AirMonetizationSDK27AirMonetizationInterstitial")
@interface AirMonetizationInterstitial : AirMotetizationAd
/// Start working with Intestitial by creating it
/// with this class method.
/// @return Instantiated AirMonetizationInterstitial object ready to load.
+ (AirMotetizationAd * _Nullable)interstitial SWIFT_WARN_UNUSED_RESULT;
/// Start working with Intestitial by creating it
/// with this class method.
/// @return Instantiated AirMonetizationInterstitial object ready to load.
+ (AirMotetizationAd * _Nullable)interstitialWithPlacementName:(NSString * _Nonnull)placementName SWIFT_WARN_UNUSED_RESULT;
/// Sets placement Name for interstitial.
/// For placement Name see your Dashboard.
/// @param placementName String with chosen placement.
- (void)setPlacementNameWithPlacementName:(NSString * _Nonnull)placementName;
- (void)setSourceWithSource:(NSString * _Nonnull)source;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// AirMonetizationRewarded is a base class to use Rewarded VAST video Ads in your app.
/// <ol>
///   <li>
///     To start its using set your APIKey and AppId first for AirMonetization SDK.
///   </li>
///   <li>
///     Instantiate Rewarded Ad object by calling ‘rewarded’ class method.
///   </li>
///   <li>
///     You have to own returned object (it’s not a singleton).
///   </li>
///   <li>
///     Set your ‘AirMonetizationRewardedAdDelegate’ if you need to handle ad events.
///   </li>
///   <li>
///     Call ‘load’
///   </li>
/// </ol>
SWIFT_CLASS("_TtC18AirMonetizationSDK23AirMonetizationRewarded")
@interface AirMonetizationRewarded : AirMotetizationAd
/// Start working with Rewarded VAST Video Ad by creating it
/// with this class method.
/// @return Instantiated AirMonetizationRewarded object ready to load.
+ (AirMotetizationAd * _Nullable)rewardedWithPlacementName:(NSString * _Nonnull)placementName SWIFT_WARN_UNUSED_RESULT;
/// Sets placement Name for rewarded ad.
/// For placement Name see your Dashboard.
/// @param placementName String with chosen placement.
- (void)setPlacementNameWithPlacementName:(NSString * _Nonnull)placementName;
/// Sets user id for rewarded ad.
/// User ID corresponds to the unique user ID from the application.
/// This field is necessary for the user to receive a reward.
/// This field is required for Rewarded Ads.
/// @param userId String with user identifier from the app.
- (void)setUserIdWithUserId:(NSString * _Nonnull)userId;
- (void)setSourceWithSource:(NSString * _Nonnull)source;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// Implement AirMonetizationRewardedAdDelegate protocol to receive events
/// for rewarded ads states, show, handle errors, manage your app’s
/// state like playing/stopping video.
SWIFT_PROTOCOL("_TtP18AirMonetizationSDK33AirMonetizationRewardedAdDelegate_")
@protocol AirMonetizationRewardedAdDelegate
/// Invoked just after starting rewarded ad loading request to server.
/// @param ad Corresponding AirMotetizationAd object.
- (void)rewardedAdDidStartLoadWithAd:(AirMotetizationAd * _Nonnull)ad;
/// Invoked once rewarded ad is loaded and ready to show.
/// You have to call ‘show’ method on AirMotetizationAd by yourself.
/// Otherwise it won’t be displayed.
/// Use this method to pause any activity
/// like game/video/music etc. and then
/// show the rewarded ad.
/// @param ad Corresponding AirMotetizationAd object.
- (void)rewardedAdDidFinishLoadWithAd:(AirMotetizationAd * _Nonnull)ad rewardName:(NSString * _Nonnull)rewardName rewardValue:(NSInteger)rewardValue;
/// Invoked after reward was receivev for user.
/// @param ad Corresponding AirMotetizationAd object.
- (void)rewardedAdDidReceiveRewardWithAd:(AirMotetizationAd * _Nonnull)ad rewardName:(NSString * _Nonnull)rewardName rewardValue:(NSInteger)rewardValue;
/// Invoked after rewarded ad is displayed on screen.
/// @param ad Corresponding AirMotetizationAd object.
- (void)rewardedAdDidShowWithAd:(AirMotetizationAd * _Nonnull)ad;
/// Invoked just after user’s click on rewarded ad
/// but before its processing.
/// @param ad Corresponding AirMotetizationAd object.
- (void)rewardedAdDidClickWithAd:(AirMotetizationAd * _Nonnull)ad;
/// Invoked after user closed rewarded an ad with a close button.
/// @param ad Corresponding AirMotetizationAd object.
- (void)rewardedAdDidCloseWithAd:(AirMotetizationAd * _Nonnull)ad;
/// Invoked after a user’s click on rewarded ad is processed and user is redirected to advertiser’s URL.
/// Also invoked after user finishes ad action.
/// Getting this delegate’s event while redirection usually means that application is left and likely is going to background.
/// Process it appropriately.
/// @param ad Corresponding AirMotetizationAd object.
- (void)rewardedAdDidCompleteWithAd:(AirMotetizationAd * _Nonnull)ad;
/// Invoked when all rewarded ad actions are finished and rewarded ad deallocated its resources.
/// After this method you can deallocate ‘AirMotetizationAd’ object itself.
/// Use this method to continue playing of your game/video/audio.
/// @param ad Corresponding AirMotetizationAd object.
- (void)rewardedAdDidDismissWithAd:(AirMotetizationAd * _Nonnull)ad;
/// Invoked in case of any error occured on rewarded ad loading.
/// @param ad Corresponding AirMotetizationAd object.
/// @param error String with error description.
- (void)rewardedAdDidFailWithErrorWithAd:(AirMotetizationAd * _Nonnull)ad error:(NSString * _Nonnull)error;
/// Invoked in case of any error occured on rewarded ad displaying.
/// @param ad Corresponding AirMotetizationAd object.
/// @param error String with error description.
- (void)rewardedAdDidShowFailWithErrorWithAd:(AirMotetizationAd * _Nonnull)ad error:(NSString * _Nonnull)error;
@end


/// AirMonetizationVAST is a base class to use VAST video Ads in your app.
/// <ol>
///   <li>
///     To start its using set your APIKey and AppId first for AirMonetization SDK.
///   </li>
///   <li>
///     Instantiate VAST Ad object by calling ‘vastVideo’ class method.
///   </li>
///   <li>
///     You have to own returned object (it’s not a singleton).
///   </li>
///   <li>
///     Set your ‘AirMonetizationAdDelegate’ if you need to handle ad events.
///   </li>
///   <li>
///     Call ‘load’
///   </li>
/// </ol>
SWIFT_CLASS("_TtC18AirMonetizationSDK19AirMonetizationVAST")
@interface AirMonetizationVAST : AirMotetizationAd
/// Start working with VAST Video Ad by creating it
/// with this class method.
/// @return Instantiated AirMonetizationVAST object ready to load.
+ (AirMotetizationAd * _Nullable)vastVideo SWIFT_WARN_UNUSED_RESULT;
/// Start working with VAST Video Ad by creating it
/// with this class method.
/// @return Instantiated AirMonetizationVAST object ready to load.
+ (AirMotetizationAd * _Nullable)vastVideoWithPlacementName:(NSString * _Nonnull)placementName SWIFT_WARN_UNUSED_RESULT;
/// Sets placement Name for VAST Video.
/// For placement Name see your Dashboard.
/// @param placementName String with chosen placement.
- (void)setPlacementNameWithPlacementName:(NSString * _Nonnull)placementName;
- (void)setSourceWithSource:(NSString * _Nonnull)source;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end














#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
